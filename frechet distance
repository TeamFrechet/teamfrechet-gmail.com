import matplotlib.pyplot as plt
import math
import numpy as np

def euc_dist(pt1,pt2):
    #  return dist of the 2 point send
    return math.sqrt((pt2[0]-pt1[0])*(pt2[0]-pt1[0])+(pt2[1]-pt1[1])*(pt2[1]-pt1[1]))

def _c(ca,i,j,P,Q):
    if ca[i,j] > -1:
        return ca[i,j]
    elif i == 0 and j == 0:
        #  mat only one digit
        ca[i,j] = euc_dist(P[0],Q[0])  # calculate the dist between the only two point of P,Q
    elif i > 0 and j == 0:
        #  one col, and more then one row
        ca[i,j] = max(_c(ca,i-1,0,P,Q),euc_dist(P[i],Q[0]))#take max between:
        # 1.recalculate _c at index i-1,0 -  next untreated point
        # 2.calculate the dist between the one point of Q and next untreated point of P
    elif i == 0 and j > 0:
        #  one row, and more then one col
        ca[i,j] = max(_c(ca,0,j-1,P,Q),euc_dist(P[0],Q[j]))
    elif i > 0 and j > 0:
        #  more then one col and row
        ca[i,j] = max(min(_c(ca,i-1,j,P,Q),_c(ca,i-1,j-1,P,Q),_c(ca,i,j-1,P,Q)),euc_dist(P[i],Q[j]))
    else:
        #  prob to calculate
        ca[i,j] = float("inf")
    return ca[i,j]

""" Algorithm: http://www.kr.tuwien.ac.at/staff/eiter/et-archive/cdtr9464.pdf
P and Q are arrays of 2-element arrays (points)
"""
def frechetDist(P,Q):
    ca = np.ones((len(P),len(Q)))#a matrix of one size: rows- rows of P, col- rows of Q
    ca = np.multiply(ca,-1)#same matrix all values double minus one
    print(len(P)-1,len(Q)-1)
    return _c(ca,len(P)-1,len(Q)-1,P,Q)#send ca and index of the last places at ca with P,Q

print("main")
P=[[2,2,2],[2,2,2],[2,2,2]]
Q=[[1,1,2],[2,2,2],[2,2,2]]
print(frechetDist(P,Q))#the leash min size

